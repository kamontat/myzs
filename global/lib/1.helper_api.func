#!/usr/bin/env bash

# maintain: Kamontat Chantrachirathumrong
# version:  1.0.0
# since:    21/04/2018

# -------------------------------------------------
# Functions
# -------------------------------------------------

# @explain    - check is input is boolean?
# @params - 1 - variable to check
# @return     - 0 if is a boolean; otherwise, return 1
is_boolean() {
	[[ $1 == true ]] || [[ $1 == false ]] 2>/dev/null && return 0 || return 1
}

# @explain    - check is input is integer?
# @params - 1 - variable to check
# @return     - 0 if is a boolean; otherwise, return 1
is_integer() {
	[[ $1 =~ ^[0-9]+$ ]] 2>/dev/null && return 0 || return 1
}

# @explain    - check is input is sign integer (both positive and negative number)?
# @params - 1 - variable to check
# @return     - 0 if is a boolean; otherwise, return 1
is_sign_integer() {
	[[ $1 =~ ^-?[0-9]+$ ]] 2>/dev/null && return 0 || return 1
}

# @explain    - check is input is decimal?
# @params - 1 - variable to check
# @return     - 0 if is a boolean; otherwise, return 1
is_decimal() {
	[[ $1 =~ ^[0-9]+([.][0-9]+)?$ ]] 2>/dev/null && return 0 || return 1
}

# @explain    - check is input is sign decimal (both positive and negative number)?
# @params - 1 - variable to check
# @return     - 0 if is a boolean; otherwise, return 1
is_sign_decimal() {
	[[ $1 =~ ^-?[0-9]+([.][0-9]+)?$ ]] 2>/dev/null && return 0 || return 1
}

# @params - 1 - file name
# @return     - true if file exist
is_file_exist() {
	[ -f "$1" ] && return 0 || return 1
}

# @params - 1 - folder name
# @return     - true if folder exist
is_folder_exist() {
	[ -d "$1" ] && return 0 || return 1
}

has_internet() {
	if [ -n "$TMP_DETAILS" ]; then
		if out=$(curl -s ifconfig.co/json); then
			ndd_detail_log "$out"
			return 0
		else
			return $?
		fi
	else
		curl -s ifconfig.co/json >>/dev/null && return 0 || return 1
	fi
}

to_lower_case() {
	echo "$1" | tr '[:upper:]' '[:lower:]'
}

to_upper_case() {
	echo "$1" | tr '[:lower:]' '[:upper:]'
}

if_file_exist() {
	[ -f "$1" ]
}

if_folder_exist() {
	[ -d "$1" ]
}

if_command_exist() {
	command -v "$1" &>/dev/null
}

download_file() {
	# support temp file
	test -s "$2" && mv "$2" ".caches_$(date +%s)_$2"
	http_code="$(curl -sL -w "%{http_code}" -o "$2" "$1")"
	[ "$http_code" -eq 200 ] && return 0 || return 1
}

# @params - 1 - relative file path
# @return     - absolute file path
get_abs_filename() {
	curr="$PWD"
	# $1 : relative filename
	rel_filename="$1"
	f="${rel_filename:0:1}"                  # first char
	l="${rel_filename:${#rel_filename}-1:1}" # last char

	[[ $l == "/" ]] &&
		rel_filename="${rel_filename:0:${#rel_filename}-1}" # handle if input have / in the last char, REMOVE IT!
	[[ $f == "/" ]] &&
		echo "$rel_filename" &&
		return 0 # handle input is already absolute path
	echo "$(eval cd "$(dirname "$1")" && pwd)/$(basename "${rel_filename[*]}")"
	cd "$curr" || return 1
}

# @explain    - get environment from terminal
# @params - 1 - regex for variable name
get_env_value() {
	# since 'printenv' only return the export function
	# so 'sed /BASH_FUNC/,$d' will delete the line contains 'BASH_FUNC' until end of file
	# BASH_FUNC - keyword that bash add when print function
	# shellcheck disable=SC2015
	is_command_exist env &&
		env | sed '/BASH_FUNC/,$d' | grep "$1" ||
		printenv | sed '/BASH_FUNC/,$d' | grep "$1"
}

get_full_path() {
	input="$1"                 # get input (file/folder)
	curr="$PWD"                # get current path
	cd "$input" && path="$PWD" # move to file/folder path and save path
	cd "$curr" || return 1     # move back
	echo "$path"               # echo result
}

log_to() {
	exec >>"$1"
	while IFS= read -r line; do
		printf '%s\n' "$line"
	done
}

# @explain - get content between 2 string
get_content_between_in_file() {
	local start end filename

	start="$1"
	end="$2"
	filename="$3"
	sed -e "/$start/,/$end/!d" "$filename"
}

new_line() {
	echo
}

get_work_location() {
	echo "${MYZS_WORK_ROOT}/$1"
}

to_work_location() {
	cd "$(get_work_location "$1")" || return 1
}
